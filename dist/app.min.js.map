{"version":3,"sources":["app.js","app-sharer.js","base-controller.js","cropper-component.js","ga-analytics.js","guid.js","image-file-reader.js"],"names":["angular","module","service","Sharer","$inject","$q","_promise","this","fbfeed","caption","description","pic","link","defer","FB","ui","method","picture","response","resolve","reject","promise","fbshare","href","twshare","desc","url","openwin","window","open","focus","factory","BaseController","$scope","unbinds","$on","u","call","scope","event","handler","push","$watch","CropperService","CropServiceEvents","imageLoaded","imageSelected","EXIFFetched","completed","cropped","imageReader","$rootScope","$window","_that","_cropper","cropper","_isDirty","_config","dragMode","scalable","aspectRatio","restore","minCropBoxWidth","checkOrientation","guides","toggleDragModeOnDblclick","center","highlight","cropBoxMovable","cropBoxResizable","_image","Image","Cropper","Error","setDirty","value","setElement","image","getElement","setConfig","config","copy","getConfig","exportData","prefix","data","img","canvas","getCroppedCanvas","width","w","height","h","toDataURL","src","idx","indexOf","base64","substring","length","fileName","generateUUID","drawImage","tempCanvas","document","createElement","naturalWidth","naturalHeight","ctx","getContext","zoomTo","rotate","degree","getCropper","load","files","cropend","e","action","undefined","EXIF","read","then","onload","notify","message","complete","getData","exifdata","Orientation","cancel","CropperComponent","$cropper","_btn","restrict","controller","newV","oldV","val","exportCroppedData","fileBrowse","console","log","click","controllerAs","elem","attrs","find","element","append","bind","target","addPreview","unbind","CropperComponentPreview","requie","html","directive","GAnalytics","_ga","ga","page","hitType","category","label","eventCategory","eventAction","eventLabel","d","Date","getTime","uuid","replace","c","r","Math","random","floor","toString","ImageFileReader","p","f","reader","FileReader","promises","i","type","match","readyState","DONE","result","name","readAsDataURL","all"],"mappings":"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","file":"app.min.js","sourcesContent":["/*!\n * angularjs-components\n * https://github.com/cenkce/angularjs-utils#readme\n * Version: 0.1.0 - 2016-02-03T13:36:01.547Z\n * License: MIT\n */\n\n\n(function (angular) { \n'use strict';\nvar module = angular.module('cenkce.utils', ['ng']);\n\n/**\n * Created by cenkce on 1/25/16.\n */\n\n\nangular.module('cenkce.utils').service('utils.sharer', Sharer);\nSharer.$inject = ['$q'];\n\nfunction Sharer($q) {\n    var _promise =  $q;\n    this.fbfeed = function(caption, description, pic, link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'feed',\n            link: link,\n            picture:pic,\n            description:description,\n            caption: caption,\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.fbshare = function(link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'share',\n            href: link\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.twshare = function(desc, link){\n        var url = \"http://twitter.com/home?status=\"+desc+\" \"+link;\n        var openwin = window.open(url, '', 'height=600,width=800,resizable=true,scrollbars=yes,toolbar=no,menubar=no,location=no');\n\n        if (window.focus) {\n            openwin.focus();\n        }\n    };\n};\n\n/**\n * Created by cenkce on 1/8/16.\n */\n\n\nangular.module('cenkce.utils').factory('utils.baseController', BaseController);\n\nBaseController.$inject = ['$scope'];\n\n/**\n * Base controller class.\n * @param $scope\n * @param $route\n * @constructor\n */\nfunction BaseController($scope) {\n    var page = [];\n    var unbinds = [];\n\n    //Auto unbinds event hadlers when scope is destroyed\n    $scope.$on('$destroy', function () {\n        for(var u in unbinds){\n            unbinds[u].call();\n        }\n    });\n\n    this.$on = function (scope, event, handler) {\n        unbinds.push(scope.$on(event, handler));\n    };\n\n    this.$watch = function (scope, event, handler) {\n        unbinds.push(scope.$watch(event, handler));\n    };\n};\n\n/**\n * Created by cenkce on 1/22/16.\n */\n\nCropperService.$inject = ['cenkce.imageFileReader', '$rootScope', '$window', '$q'];\n\nvar CropServiceEvents = {\n    imageLoaded :'cropper:image-loaded',\n    imageSelected:'cropper:image-selected',\n    EXIFFetched:'cropper:exif-fetched',\n    completed:'cropper:completed',\n    cropped:'cropper:cropped'\n};\n\nfunction CropperService(imageReader, $rootScope, $window, $q){\n    var _that = this, _cropper = $window.cropper, waitingRotation = 0, temp, _isDirty = false,\n        _config = {\n            dragMode: 'move',\n            scalable:false,\n            aspectRatio: 1,\n            restore: false,\n            minCropBoxWidth:230,\n            checkOrientation : false,\n            guides: false,\n            toggleDragModeOnDblclick:false,\n            center: false,\n            highlight: false,\n            cropBoxMovable: false,\n            cropBoxResizable: false\n        },\n        _image = new Image;\n\n    if(typeof Cropper === 'undefined')\n        throw new Error('Croppperjs is not found.');\n\n    function setDirty(value){\n        _isDirty = value;\n    }\n\n    this.setElement = function (image) {\n        _image = image;\n    };\n\n    this.getElement = function () {\n        return _image;\n    };\n\n    this.setConfig = function (config) {\n        _config = angular.copy(config);\n    };\n\n    this.getConfig = function () {\n        angular.copy(_config);\n    };\n\n    this.exportData = function () {\n        if(!_cropper)\n            return;\n\n        var prefix = ';base64,';\n        var data   = {};\n        var img    = new Image();\n\n        var canvas = _cropper.getCroppedCanvas({width:w, height:h});\n        data.url = canvas.toDataURL(\"image/jpeg\", 1.0);\n\n        img.src = data.url;\n\n        if(!data.url)\n            return false;\n\n        data.idx = data.url.indexOf(prefix);\n\n        if (data.idx >= 0) {\n            data.base64 = data.url.substring(data.idx + prefix.length);\n        }\n\n        data.fileName = generateUUID()+'.jpg';\n        return data;\n    };\n\n    function drawImage(image) {\n        var tempCanvas = document.createElement('canvas');\n        tempCanvas.width = image.naturalWidth;\n        tempCanvas.height = image.naturalHeight;\n\n        var ctx = tempCanvas.getContext(\"2d\");\n        ctx.drawImage(image, 0, 0);\n\n        return tempCanvas.toDataURL();\n    };\n\n    this.zoomTo = function (value) {\n        _cropper.zoomTo(value);\n    };\n\n    this.rotate = function (degree) {\n        _cropper.rotate(degree);\n    };\n\n    this.getCropper = function () {\n        return _cropper;\n    };\n\n    this.load = function(files){\n        setDirty(true);\n        var defer = $q.defer();\n\n        _config.cropend = function (e, action) {\n        };\n\n        if(files.length > 1)\n            throw new Error('Multi-files are not supported');\n\n        if($window.EXIF === undefined)\n            throw new Error('exif-js cannot be found.');\n\n        imageReader.read(files).then(function (data) {\n            if(!data[0].url){\n                throw new Error('File data is not readable');\n            }\n\n            _image.src = data[0].url;\n\n            _image.onload = function () {\n                //var img = new Image;\n                setDirty(false);\n\n                //IOS auto rotation hack\n                _image.src = drawImage(_image);\n\n                _image.onload = function () {\n                    defer.notify({message:CropServiceEvents.imageLoaded, complete: function () {\n                        _cropper = new Cropper(_image, _config);\n\n                        _that.zoomTo(0.5);\n\n                        //detects image orientation and rotates it by orientation.\n                        EXIF.getData(files[0], function() {\n                            defer.notify({message:CropServiceEvents.EXIFFetched});\n\n                            switch(this.exifdata.Orientation){\n                                case 8:\n                                    _cropper.rotate(-90);\n                                    break;\n                                case 3:\n                                    _cropper.rotate(180);\n                                    break;\n                                case 6:\n                                    _cropper.rotate(90);\n                                    break;\n                                default:\n\n                                    break;\n                            }\n\n                            defer.notify({message:CropServiceEvents.completed, complete: function () {\n                                defer.resolve();\n                            }});\n                        });\n\n                    }, cancel: function () {\n                        defer.reject();\n                    }});\n                    //Creates new Cropper instance and injects hacked image to\n                };\n            };\n\n            _image.src = data[0].url;\n        });\n\n        return defer.promise;\n    }\n}\n\nCropperComponent.$inject = ['cenkce.cropperService'];\n\nfunction CropperComponent($cropper){\n    var _btn, _image = new Image;\n    $cropper.setElement(_image);\n    return {\n        restrict: 'A',\n        controller: ['$scope', function ($scope) {\n            $scope.$watch('zoom', function (newV, oldV) {\n                if(newV)\n                    $scope.zoomTo(newV);\n            });\n\n            $scope.zoomTo = function (val) {\n                $cropper.zoomTo(val);\n            };\n\n            $scope.exportCroppedData = function (w, h) {\n                $cropper.exportData();\n            };\n\n            $scope.fileBrowse = function () {\n                console.log('browse');\n                _btn[0].click();\n            };\n        }],\n        controllerAs:'cropperCtrl',\n        scope:true,\n        link: function ($scope, elem, attrs) {\n            //File input\n            _btn = elem.find('input[type=file]');\n\n            //file input is not found.\n            if(_btn.length == 0){\n                _btn = angular.element('<input type=\\'file\\' style=\"display: none;\" >');\n                elem.append(_btn);\n            }\n            //file input source is changed by user\n            _btn.bind('change', function (e) {\n                $cropper.load(e.target.files).then(\n                    //completed\n                    function (data) {\n                       console.log('completed');\n                    },\n                    //error\n                    function (data) {\n\n                    },\n                    //messages\n                    function (data) {\n                        console.log('messages : ',data);\n                        if(data.message == CropServiceEvents.imageLoaded) {\n                            $scope.addPreview($cropper.getElement());\n                            data.complete();\n                        } else if(data.message == CropServiceEvents.completed) {\n                            data.complete();\n                        }\n                    }\n                );\n            });\n\n            $scope.$on('$destroy', function () {\n                _btn.unbind('change');\n                _btn = null;\n            });\n        }\n    }\n}\n\nfunction CropperComponentPreview(){\n    return {\n        requie:'?cropper',\n        restrict:'A',\n        link: function ($scope, elem, attrs) {\n            $scope.addPreview = function(element){\n                elem.html('');\n                elem.append(element);\n            }\n        }\n    }\n};\n\nangular.module('cenkce.utils').service('cenkce.cropperService', CropperService);\nangular.module('cenkce.utils').directive('cropper', CropperComponent);\nangular.module('cenkce.utils').directive('cropperPreview', CropperComponentPreview);\n\n/**\n * Created by cenkce on 1/25/16.\n */\n\nangular.module('cenkce.utils').service('cenkce.ga', GAnalytics);\n\nGAnalytics.$inject = ['$window'];\n\nfunction GAnalytics($window) {\n    var _ga = $window.ga;\n\n    this.page = function (page) {\n        _ga('send', {\n            hitType: 'pageview',\n            page: page\n        });\n    };\n\n    this.event = function (category, action, label) {\n        _ga('send', {\n            hitType: 'event',\n            eventCategory: category,\n            eventAction: action,\n            eventLabel: label\n        });\n    };\n};\n\n/**\n * Created by cenkce on 2/1/16.\n */\nangular.module('cenkce.utils').service('cenkce.generateUUID', generateUUID);\nfunction generateUUID() {\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n};\n/**\n * Created by cenkce on 1/23/16.\n */\n\nImageFileReader.$inject = ['$q'];\n\nfunction ImageFileReader(p) {\n    var $q = p;\n    this.read = function(files) {\n        var reader = new FileReader(),\n            filesData = [],\n            prefix = ';base64,';\n\n        var promises = [];\n\n        for (var i = 0, f; f = files[i]; i++) {\n            // Only process image files.\n            if (!f.type.match('image.*')) {\n                throw new Error('type must be image');\n                continue;\n            }\n\n            var defer = $q.defer();\n            promises.push(defer.promise);\n\n            (function (defer, f) {\n                reader.onload = function(e) {\n                    var data = {};\n                    var idx;\n\n                    if(reader.readyState == FileReader.DONE) {\n                        data.url = e.target.result;\n                        data.idx = data.url.indexOf(prefix);\n\n                        if (data.idx >= 0) {\n                            data.base64 = data.url.substring(data.idx + prefix.length);\n                        }\n\n                        data.fileName = f.name;\n                    }\n\n                    defer.resolve(data);\n                };\n\n            })(defer, f);\n\n            reader.readAsDataURL(f);\n        }\n\n        return $q.all(promises);\n    };\n};\n\nangular.module('cenkce.utils').service('cenkce.imageFileReader', ImageFileReader);\n\n}(window.angular));","/**\n * Created by cenkce on 1/25/16.\n */\n\n\nangular.module('cenkce.utils').service('utils.sharer', Sharer);\nSharer.$inject = ['$q'];\n\nfunction Sharer($q) {\n    var _promise =  $q;\n    this.fbfeed = function(caption, description, pic, link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'feed',\n            link: link,\n            picture:pic,\n            description:description,\n            caption: caption,\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.fbshare = function(link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'share',\n            href: link\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.twshare = function(desc, link){\n        var url = \"http://twitter.com/home?status=\"+desc+\" \"+link;\n        var openwin = window.open(url, '', 'height=600,width=800,resizable=true,scrollbars=yes,toolbar=no,menubar=no,location=no');\n\n        if (window.focus) {\n            openwin.focus();\n        }\n    };\n};\n","/**\n * Created by cenkce on 1/8/16.\n */\n\n\nangular.module('cenkce.utils').factory('utils.baseController', BaseController);\n\nBaseController.$inject = ['$scope'];\n\n/**\n * Base controller class.\n * @param $scope\n * @param $route\n * @constructor\n */\nfunction BaseController($scope) {\n    var page = [];\n    var unbinds = [];\n\n    //Auto unbinds event hadlers when scope is destroyed\n    $scope.$on('$destroy', function () {\n        for(var u in unbinds){\n            unbinds[u].call();\n        }\n    });\n\n    this.$on = function (scope, event, handler) {\n        unbinds.push(scope.$on(event, handler));\n    };\n\n    this.$watch = function (scope, event, handler) {\n        unbinds.push(scope.$watch(event, handler));\n    };\n};\n","/**\n * Created by cenkce on 1/22/16.\n */\n\nCropperService.$inject = ['cenkce.imageFileReader', '$rootScope', '$window', '$q'];\n\nvar CropServiceEvents = {\n    imageLoaded :'cropper:image-loaded',\n    imageSelected:'cropper:image-selected',\n    EXIFFetched:'cropper:exif-fetched',\n    completed:'cropper:completed',\n    cropped:'cropper:cropped'\n};\n\nfunction CropperService(imageReader, $rootScope, $window, $q){\n    var _that = this, _cropper = $window.cropper, waitingRotation = 0, temp, _isDirty = false,\n        _config = {\n            dragMode: 'move',\n            scalable:false,\n            aspectRatio: 1,\n            restore: false,\n            minCropBoxWidth:230,\n            checkOrientation : false,\n            guides: false,\n            toggleDragModeOnDblclick:false,\n            center: false,\n            highlight: false,\n            cropBoxMovable: false,\n            cropBoxResizable: false\n        },\n        _image = new Image;\n\n    if(typeof Cropper === 'undefined')\n        throw new Error('Croppperjs is not found.');\n\n    function setDirty(value){\n        _isDirty = value;\n    }\n\n    this.setElement = function (image) {\n        _image = image;\n    };\n\n    this.getElement = function () {\n        return _image;\n    };\n\n    this.setConfig = function (config) {\n        _config = angular.copy(config);\n    };\n\n    this.getConfig = function () {\n        angular.copy(_config);\n    };\n\n    this.exportData = function () {\n        if(!_cropper)\n            return;\n\n        var prefix = ';base64,';\n        var data   = {};\n        var img    = new Image();\n\n        var canvas = _cropper.getCroppedCanvas({width:w, height:h});\n        data.url = canvas.toDataURL(\"image/jpeg\", 1.0);\n\n        img.src = data.url;\n\n        if(!data.url)\n            return false;\n\n        data.idx = data.url.indexOf(prefix);\n\n        if (data.idx >= 0) {\n            data.base64 = data.url.substring(data.idx + prefix.length);\n        }\n\n        data.fileName = generateUUID()+'.jpg';\n        return data;\n    };\n\n    function drawImage(image) {\n        var tempCanvas = document.createElement('canvas');\n        tempCanvas.width = image.naturalWidth;\n        tempCanvas.height = image.naturalHeight;\n\n        var ctx = tempCanvas.getContext(\"2d\");\n        ctx.drawImage(image, 0, 0);\n\n        return tempCanvas.toDataURL();\n    };\n\n    this.zoomTo = function (value) {\n        _cropper.zoomTo(value);\n    };\n\n    this.rotate = function (degree) {\n        _cropper.rotate(degree);\n    };\n\n    this.getCropper = function () {\n        return _cropper;\n    };\n\n    this.load = function(files){\n        setDirty(true);\n        var defer = $q.defer();\n\n        _config.cropend = function (e, action) {\n        };\n\n        if(files.length > 1)\n            throw new Error('Multi-files are not supported');\n\n        if($window.EXIF === undefined)\n            throw new Error('exif-js cannot be found.');\n\n        imageReader.read(files).then(function (data) {\n            if(!data[0].url){\n                throw new Error('File data is not readable');\n            }\n\n            _image.src = data[0].url;\n\n            _image.onload = function () {\n                //var img = new Image;\n                setDirty(false);\n\n                //IOS auto rotation hack\n                _image.src = drawImage(_image);\n\n                _image.onload = function () {\n                    defer.notify({message:CropServiceEvents.imageLoaded, complete: function () {\n                        _cropper = new Cropper(_image, _config);\n\n                        _that.zoomTo(0.5);\n\n                        //detects image orientation and rotates it by orientation.\n                        EXIF.getData(files[0], function() {\n                            defer.notify({message:CropServiceEvents.EXIFFetched});\n\n                            switch(this.exifdata.Orientation){\n                                case 8:\n                                    _cropper.rotate(-90);\n                                    break;\n                                case 3:\n                                    _cropper.rotate(180);\n                                    break;\n                                case 6:\n                                    _cropper.rotate(90);\n                                    break;\n                                default:\n\n                                    break;\n                            }\n\n                            defer.notify({message:CropServiceEvents.completed, complete: function () {\n                                defer.resolve();\n                            }});\n                        });\n\n                    }, cancel: function () {\n                        defer.reject();\n                    }});\n                    //Creates new Cropper instance and injects hacked image to\n                };\n            };\n\n            _image.src = data[0].url;\n        });\n\n        return defer.promise;\n    }\n}\n\nCropperComponent.$inject = ['cenkce.cropperService'];\n\nfunction CropperComponent($cropper){\n    var _btn, _image = new Image;\n    $cropper.setElement(_image);\n    return {\n        restrict: 'A',\n        controller: ['$scope', function ($scope) {\n            $scope.$watch('zoom', function (newV, oldV) {\n                if(newV)\n                    $scope.zoomTo(newV);\n            });\n\n            $scope.zoomTo = function (val) {\n                $cropper.zoomTo(val);\n            };\n\n            $scope.exportCroppedData = function (w, h) {\n                $cropper.exportData();\n            };\n\n            $scope.fileBrowse = function () {\n                console.log('browse');\n                _btn[0].click();\n            };\n        }],\n        controllerAs:'cropperCtrl',\n        scope:true,\n        link: function ($scope, elem, attrs) {\n            //File input\n            _btn = elem.find('input[type=file]');\n\n            //file input is not found.\n            if(_btn.length == 0){\n                _btn = angular.element('<input type=\\'file\\' style=\"display: none;\" >');\n                elem.append(_btn);\n            }\n            //file input source is changed by user\n            _btn.bind('change', function (e) {\n                $cropper.load(e.target.files).then(\n                    //completed\n                    function (data) {\n                       console.log('completed');\n                    },\n                    //error\n                    function (data) {\n\n                    },\n                    //messages\n                    function (data) {\n                        console.log('messages : ',data);\n                        if(data.message == CropServiceEvents.imageLoaded) {\n                            $scope.addPreview($cropper.getElement());\n                            data.complete();\n                        } else if(data.message == CropServiceEvents.completed) {\n                            data.complete();\n                        }\n                    }\n                );\n            });\n\n            $scope.$on('$destroy', function () {\n                _btn.unbind('change');\n                _btn = null;\n            });\n        }\n    }\n}\n\nfunction CropperComponentPreview(){\n    return {\n        requie:'?cropper',\n        restrict:'A',\n        link: function ($scope, elem, attrs) {\n            $scope.addPreview = function(element){\n                elem.html('');\n                elem.append(element);\n            }\n        }\n    }\n};\n\nangular.module('cenkce.utils').service('cenkce.cropperService', CropperService);\nangular.module('cenkce.utils').directive('cropper', CropperComponent);\nangular.module('cenkce.utils').directive('cropperPreview', CropperComponentPreview);\n","/**\n * Created by cenkce on 1/25/16.\n */\n\nangular.module('cenkce.utils').service('cenkce.ga', GAnalytics);\n\nGAnalytics.$inject = ['$window'];\n\nfunction GAnalytics($window) {\n    var _ga = $window.ga;\n\n    this.page = function (page) {\n        _ga('send', {\n            hitType: 'pageview',\n            page: page\n        });\n    };\n\n    this.event = function (category, action, label) {\n        _ga('send', {\n            hitType: 'event',\n            eventCategory: category,\n            eventAction: action,\n            eventLabel: label\n        });\n    };\n};\n","/**\n * Created by cenkce on 2/1/16.\n */\nangular.module('cenkce.utils').service('cenkce.generateUUID', generateUUID);\nfunction generateUUID() {\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n};","/**\n * Created by cenkce on 1/23/16.\n */\n\nImageFileReader.$inject = ['$q'];\n\nfunction ImageFileReader(p) {\n    var $q = p;\n    this.read = function(files) {\n        var reader = new FileReader(),\n            filesData = [],\n            prefix = ';base64,';\n\n        var promises = [];\n\n        for (var i = 0, f; f = files[i]; i++) {\n            // Only process image files.\n            if (!f.type.match('image.*')) {\n                throw new Error('type must be image');\n                continue;\n            }\n\n            var defer = $q.defer();\n            promises.push(defer.promise);\n\n            (function (defer, f) {\n                reader.onload = function(e) {\n                    var data = {};\n                    var idx;\n\n                    if(reader.readyState == FileReader.DONE) {\n                        data.url = e.target.result;\n                        data.idx = data.url.indexOf(prefix);\n\n                        if (data.idx >= 0) {\n                            data.base64 = data.url.substring(data.idx + prefix.length);\n                        }\n\n                        data.fileName = f.name;\n                    }\n\n                    defer.resolve(data);\n                };\n\n            })(defer, f);\n\n            reader.readAsDataURL(f);\n        }\n\n        return $q.all(promises);\n    };\n};\n\nangular.module('cenkce.utils').service('cenkce.imageFileReader', ImageFileReader);\n"],"sourceRoot":"/source/"}