{"version":3,"sources":["app.js","app-sharer.js","base-controller.js","cropper-component.js","ga-analytics.js","guid.js","image-file-reader.js"],"names":["angular","module","service","Sharer","$inject","$q","_promise","this","fbfeed","caption","description","pic","link","defer","FB","ui","method","picture","response","resolve","reject","promise","fbshare","href","twshare","desc","url","openwin","window","open","focus","factory","BaseController","$scope","_unbinds","_that","$on","clearEventHandlers","u","call","unbindAll","length","shilt","scope","event","handler","push","$watch","CropperApplication","CropServiceEvents","imageLoaded","imageSelected","EXIFFetched","completed","cropped","imageReader","$rootScope","$window","_cropper","cropper","_isDirty","_config","dragMode","scalable","aspectRatio","restore","minCropBoxWidth","checkOrientation","guides","toggleDragModeOnDblclick","center","highlight","cropBoxMovable","cropBoxResizable","_image","Image","_element","element","Cropper","Error","setDirty","value","create","source","img","src","onload","undefined","EXIF","drawImage","append","autoRotate","getImage","image","getData","exifdata","Orientation","rotate","getElement","setConfig","config","copy","getConfig","exportData","w","h","prefix","data","canvas","getCroppedCanvas","width","height","toDataURL","idx","indexOf","base64","substring","tempCanvas","document","createElement","naturalWidth","naturalHeight","ctx","getContext","zoomTo","degree","getCropper","loadFromFileObject","files","cropend","e","action","read","then","notify","loadFromUrl","p","CropperComponent","$cropper","_btn","restrict","controller","zoom","newV","oldV","$parent","exportCroppedData","fileBrowse","click","controllerAs","elem","attrs","find","bind","addPreview","target","message","unbind","CropperComponentPreview","requie","html","directive","GAnalytics","_ga","ga","page","hitType","category","label","eventCategory","eventAction","eventLabel","generateUUID","d","Date","getTime","uuid","replace","c","r","Math","random","floor","toString","ImageFileReader","f","reader","FileReader","promises","i","type","match","readyState","DONE","result","fileName","name","readAsDataURL","all"],"mappings":"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","file":"app.min.js","sourcesContent":["/*!\n * angularjs-components\n * https://github.com/cenkce/angularjs-utils#readme\n * Version: 0.1.0 - 2016-02-23T13:01:13.622Z\n * License: MIT\n */\n\n\n(function (angular) { \n'use strict';\nvar module = angular.module('cenkce.utils', ['ng']);\n\n/**\n * Created by cenkce on 1/25/16.\n */\n\n\nangular.module('cenkce.utils').service('cenkce.utils.sharer', Sharer);\nSharer.$inject = ['$q'];\n\nfunction Sharer($q) {\n    var _promise =  $q;\n    this.fbfeed = function(caption, description, pic, link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'feed',\n            link: link,\n            picture:pic,\n            description:description,\n            caption: caption,\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.fbshare = function(link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'share',\n            href: link\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.twshare = function(desc, link){\n        var url = \"http://twitter.com/home?status=\"+desc+\" \"+link;\n        var openwin = window.open(url, '', 'height=600,width=800,resizable=true,scrollbars=yes,toolbar=no,menubar=no,location=no');\n\n        if (window.focus) {\n            openwin.focus();\n        }\n    };\n};\n\n/**\n * Created by cenkce on 1/8/16.\n */\n\n\nangular.module('cenkce.utils').factory('cenkce.utils.baseController', BaseController);\n\nBaseController.$inject = ['$scope'];\n\n/**\n * Base controller class.\n * @param $scope\n * @param $route\n * @constructor\n */\nfunction BaseController($scope) {\n    var _unbinds = [], _that = this;\n\n    //Auto unbinds event hadlers when scope is destroyed\n    $scope.$on('$destroy', function () {\n        _that.clearEventHandlers();\n    });\n\n    this.clearEventHandlers = function () {\n        for(var u in _unbinds){\n            _unbinds[u].call();\n        }\n    };\n\n    this.unbindAll = function () {\n        while(_unbinds.length > 0){\n            (_unbinds.shilt())();\n        }\n    };\n\n    this.$on = function (scope, event, handler) {\n        _unbinds.push(scope.$on(event, handler));\n    };\n\n    this.$watch = function (scope, event, handler) {\n        _unbinds.push(scope.$watch(event, handler));\n    };\n};\n\n/**\n * Created by cenkce on 1/22/16.\n */\n\nCropperApplication.$inject = ['cenkce.utils.imageFileReader', '$rootScope', '$window', '$q'];\n\nvar CropServiceEvents = {\n    imageLoaded :'cropper:image-loaded',\n    imageSelected:'cropper:image-selected',\n    EXIFFetched:'cropper:exif-fetched',\n    completed:'cropper:completed',\n    cropped:'cropper:cropped'\n};\n\nfunction CropperApplication(imageReader, $rootScope, $window, $q){\n    var _that = this, _cropper = $window.cropper, waitingRotation = 0, temp, _isDirty = false,\n        _config = {\n            dragMode: 'move',\n            scalable:false,\n            aspectRatio: 1,\n            restore: false,\n            minCropBoxWidth:230,\n            checkOrientation : false,\n            guides: false,\n            toggleDragModeOnDblclick:false,\n            center: false,\n            highlight: false,\n            cropBoxMovable: false,\n            cropBoxResizable: false\n        },\n        _image = new Image,\n        _element = angular.element('<div></div>');\n\n    if(typeof Cropper === 'undefined')\n        throw new Error('Croppperjs is not found.');\n\n    /**\n     * Sets dirty state\n     * @param value\n     */\n    function setDirty(value) {\n        _isDirty = value;\n    }\n\n    function create(source){\n        setDirty(true);\n        var defer = $q.defer();\n\n        var img = new Image;\n        img.src = source;\n\n        img.onload = function () {\n            //var img = new Image;\n\n            if($window.EXIF === undefined)\n                throw new Error('exif-js cannot be found.');\n\n            //IOS auto rotation hack\n            _image.src = _that.drawImage(img);\n\n            _image.onload = function () {\n                _element.append(_image);\n                _cropper = new Cropper(_image, _config);\n                setDirty(false);\n\n                //detects image orientation and rotates it\n                _that.autoRotate(this.src);\n                defer.resolve('cenkce');\n            };\n        };\n\n        return defer.promise;\n    }\n\n    this.getImage = function () {\n        var image = new Image();\n        image.src = _image.src;\n        return image;\n    }\n\n    this.autoRotate = function (source) {\n        EXIF.getData(source, function() {\n            //defer.notify({message:CropServiceEvents.EXIFFetched});\n\n            switch(this.exifdata.Orientation){\n                case 8:\n                    _cropper.rotate(-90);\n                    break;\n                case 3:\n                    _cropper.rotate(180);\n                    break;\n                case 6:\n                    _cropper.rotate(90);\n                    break;\n                default:\n                    break;\n            }\n\n        });\n    }\n\n    /**\n     * Returns cropperjs html container element\n     * @returns {*|Object}\n     */\n    this.getElement = function () {\n        return _element;\n    };\n\n    /**\n     * Sets cropperjs config\n     * @param config\n     */\n    this.setConfig = function (config) {\n        _config = angular.copy(config);\n    };\n\n    /**\n     * Return cropperjs config\n     */\n    this.getConfig = function () {\n        angular.copy(_config);\n    };\n\n    /**\n     * Returns an image data object with base64 data\n     *\n     * {\n     *   //Base64 data\n     *   url:'',\n     *   //Headerless Base64 data\n     *   base64:''\n     * }\n     * @param w\n     * @param h\n     * @returns {*}\n     */\n    this.exportData = function (w, h) {\n        if(!_cropper)\n            return;\n\n        var prefix = ';base64,';\n        var data   = {};\n        var img    = new Image();\n\n        var canvas = _cropper.getCroppedCanvas({width:w, height:h});\n        data.url   = canvas.toDataURL(\"image/jpeg\", 1.0);\n\n        img.src = data.url;\n\n        if(!data.url)\n            return false;\n\n        data.idx = data.url.indexOf(prefix);\n\n        if (data.idx >= 0) {\n            data.base64 = data.url.substring(data.idx + prefix.length);\n        }\n\n        //data.fileName = generateUUID()+'.jpg';\n        return data;\n    };\n\n    /**\n     * Draw an image via canvas element\n     * @param image\n     * @returns {string}\n     */\n    this.drawImage = function(image) {\n        var tempCanvas = document.createElement('canvas');\n        tempCanvas.width = image.naturalWidth;\n        tempCanvas.height = image.naturalHeight;\n\n        var ctx = tempCanvas.getContext(\"2d\");\n        ctx.drawImage(image, 0, 0);\n\n        return tempCanvas.toDataURL();\n    };\n\n    /**\n     * Sets cropperjs zoom\n     * @param value\n     */\n    this.zoomTo = function (value) {\n        if(_cropper)\n            _cropper.zoomTo(value);\n    };\n\n    /**\n     * Sets cropperjs rotate\n     * @param degree\n     */\n    this.rotate = function (degree) {\n        if(_cropper)\n            _cropper.rotate(degree);\n    };\n\n    /**\n     * Returns Cropperjs instance\n     * @returns {cropper}\n     */\n    this.getCropper = function () {\n        return _cropper;\n    };\n\n    /**\n     * Loads an image from File object\n     * @param files\n     * @returns {promise|*|module.exports.currentlyUnhandled.promise|AnimateRunner.promise|qFactory.Deferred.promise|vd.g.promise}\n     */\n    this.loadFromFileObject = function(files){\n        var defer = $q.defer();\n\n        _config.cropend = function (e, action) {\n        };\n\n        if(files.length > 1)\n            throw new Error('Multi-files are not supported');\n\n        imageReader.read(files).then(function (data) {\n            if(!data[0].url){\n                defer.reject('File data is not readable');\n            }\n\n            create(data[0].url).then(\n                function (data) {\n                    defer.resolve(data);\n                },\n                function (data) {\n                    defer.reject(data);\n                },\n                function (data) {\n                    defer.notify(data);\n                }\n            );\n        });\n\n        return defer.promise;\n    };\n\n    /**\n     * Loads an image from url\n     * @param url\n     * @returns {promise}\n     */\n    this.loadFromUrl = function(url){\n\n        _config.cropend = function (e, action) {\n        };\n\n        var p = create(url).then(\n            function (data) {\n                return data;\n            },\n            function (data) {\n                return data;\n            },\n            function (data) {\n                return data;\n            }\n        );\n\n        return p;\n    };\n}\n\n\nCropperComponent.$inject = ['cenkce.utils.cropperApp'];\n\nfunction CropperComponent($cropper){\n    var _btn;\n\n    return {\n        restrict: 'A',\n        controller: ['$scope', function ($scope) {\n            $scope.cropper        = {};\n            $scope.cropper.zoomTo = 0;\n            $scope.zoom           = 0;\n\n            $scope.$watch('zoom', function (newV, oldV) {\n                if(newV)\n                    $cropper.zoomTo(newV);\n            });\n\n            $scope.$parent.exportCroppedData = function (w, h) {\n                return $cropper.exportData(w, h);\n            };\n\n            $scope.$parent.fileBrowse = function () {\n                _btn[0].click();\n            };\n        }],\n        controllerAs:'cropperCtrl',\n        scope:true,\n        link: function ($scope, elem, attrs) {\n            //File input\n            _btn = elem.find('input[type=file]');\n\n            //file input is not found.\n            if(_btn.length == 0){\n                _btn = angular.element('<input type=\\'file\\' style=\"display: none;\" >');\n                elem.append(_btn);\n            }\n\n            //file input source is changed by user\n            _btn.bind('change', function (e) {\n                $scope.addPreview($cropper.getElement());\n                $cropper.loadFromFileObject(e.target.files).then(\n                    //completed\n                    function (data) {\n                    },\n                    //error\n                    function (data) {\n                    },\n                    //messages\n                    function (data) {\n                        if(data.message == CropServiceEvents.imageLoaded) {\n                        } else if(data.message == CropServiceEvents.completed) {\n                        }\n                    }\n                );\n            });\n\n            $scope.$on('$destroy', function () {\n                _btn.unbind('change');\n                _btn = null;\n            });\n        }\n    }\n}\n\nfunction CropperComponentPreview(){\n    return {\n        requie:'?cropper',\n        restrict:'A',\n        link: function ($scope, elem, attrs) {\n            $scope.addPreview = function(element){\n                elem.html('');\n                elem.append(element);\n            }\n        }\n    }\n};\n\nangular.module('cenkce.utils').service('cenkce.utils.cropperApp', CropperApplication);\nangular.module('cenkce.utils').directive('cropper', CropperComponent);\nangular.module('cenkce.utils').directive('cropperPreview', CropperComponentPreview);\n\n/**\n * Created by cenkce on 1/25/16.\n */\n\nangular.module('cenkce.utils').service('cenkce.uitls.ga', GAnalytics);\n\nGAnalytics.$inject = ['$window'];\n\nfunction GAnalytics($window) {\n    var _ga = $window.ga;\n\n    this.page = function (page) {\n        _ga('send', {\n            hitType: 'pageview',\n            page: page\n        });\n    };\n\n    this.event = function (category, action, label) {\n        _ga('send', {\n            hitType: 'event',\n            eventCategory: category,\n            eventAction: action,\n            eventLabel: label\n        });\n    };\n};\n\n/**\n * Created by cenkce on 2/1/16.\n */\nangular.module('cenkce.utils').service('cenkce.utils.generateUUID', generateUUID);\nfunction generateUUID() {\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n};\n\n/**\n * Created by cenkce on 1/23/16.\n */\n\nImageFileReader.$inject = ['$q'];\n\n//TODO:refactor to file-reader\nfunction ImageFileReader(p) {\n    var $q = p;\n    this.read = function(files) {\n        var reader = new FileReader(),\n            filesData = [],\n            prefix = ';base64,';\n\n        var promises = [];\n\n        for (var i = 0, f; f = files[i]; i++) {\n            // process for only image files.\n            if (!f.type.match('image.*')) {\n                throw new Error('file must be image');\n                continue;\n            }\n\n            var defer = $q.defer();\n            promises.push(defer.promise);\n\n            (function (defer, f) {\n                reader.onload = function(e) {\n                    var data = {};\n                    var idx;\n\n                    if(reader.readyState == FileReader.DONE) {\n                        data.url = e.target.result;\n                        data.idx = data.url.indexOf(prefix);\n\n                        if (data.idx >= 0) {\n                            data.base64 = data.url.substring(data.idx + prefix.length);\n                        }\n\n                        data.fileName = f.name;\n                    }\n\n                    defer.resolve(data);\n                };\n\n            })(defer, f);\n\n            reader.readAsDataURL(f);\n        }\n\n        return $q.all(promises);\n    };\n};\n\nangular.module('cenkce.utils').service('cenkce.utils.imageFileReader', ImageFileReader);\n\n}(window.angular));","/**\n * Created by cenkce on 1/25/16.\n */\n\n\nangular.module('cenkce.utils').service('cenkce.utils.sharer', Sharer);\nSharer.$inject = ['$q'];\n\nfunction Sharer($q) {\n    var _promise =  $q;\n    this.fbfeed = function(caption, description, pic, link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'feed',\n            link: link,\n            picture:pic,\n            description:description,\n            caption: caption,\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.fbshare = function(link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'share',\n            href: link\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.twshare = function(desc, link){\n        var url = \"http://twitter.com/home?status=\"+desc+\" \"+link;\n        var openwin = window.open(url, '', 'height=600,width=800,resizable=true,scrollbars=yes,toolbar=no,menubar=no,location=no');\n\n        if (window.focus) {\n            openwin.focus();\n        }\n    };\n};\n","/**\n * Created by cenkce on 1/8/16.\n */\n\n\nangular.module('cenkce.utils').factory('cenkce.utils.baseController', BaseController);\n\nBaseController.$inject = ['$scope'];\n\n/**\n * Base controller class.\n * @param $scope\n * @param $route\n * @constructor\n */\nfunction BaseController($scope) {\n    var _unbinds = [], _that = this;\n\n    //Auto unbinds event hadlers when scope is destroyed\n    $scope.$on('$destroy', function () {\n        _that.clearEventHandlers();\n    });\n\n    this.clearEventHandlers = function () {\n        for(var u in _unbinds){\n            _unbinds[u].call();\n        }\n    };\n\n    this.unbindAll = function () {\n        while(_unbinds.length > 0){\n            (_unbinds.shilt())();\n        }\n    };\n\n    this.$on = function (scope, event, handler) {\n        _unbinds.push(scope.$on(event, handler));\n    };\n\n    this.$watch = function (scope, event, handler) {\n        _unbinds.push(scope.$watch(event, handler));\n    };\n};\n","/**\n * Created by cenkce on 1/22/16.\n */\n\nCropperApplication.$inject = ['cenkce.utils.imageFileReader', '$rootScope', '$window', '$q'];\n\nvar CropServiceEvents = {\n    imageLoaded :'cropper:image-loaded',\n    imageSelected:'cropper:image-selected',\n    EXIFFetched:'cropper:exif-fetched',\n    completed:'cropper:completed',\n    cropped:'cropper:cropped'\n};\n\nfunction CropperApplication(imageReader, $rootScope, $window, $q){\n    var _that = this, _cropper = $window.cropper, waitingRotation = 0, temp, _isDirty = false,\n        _config = {\n            dragMode: 'move',\n            scalable:false,\n            aspectRatio: 1,\n            restore: false,\n            minCropBoxWidth:230,\n            checkOrientation : false,\n            guides: false,\n            toggleDragModeOnDblclick:false,\n            center: false,\n            highlight: false,\n            cropBoxMovable: false,\n            cropBoxResizable: false\n        },\n        _image = new Image,\n        _element = angular.element('<div></div>');\n\n    if(typeof Cropper === 'undefined')\n        throw new Error('Croppperjs is not found.');\n\n    /**\n     * Sets dirty state\n     * @param value\n     */\n    function setDirty(value) {\n        _isDirty = value;\n    }\n\n    function create(source){\n        setDirty(true);\n        var defer = $q.defer();\n\n        var img = new Image;\n        img.src = source;\n\n        img.onload = function () {\n            //var img = new Image;\n\n            if($window.EXIF === undefined)\n                throw new Error('exif-js cannot be found.');\n\n            //IOS auto rotation hack\n            _image.src = _that.drawImage(img);\n\n            _image.onload = function () {\n                _element.append(_image);\n                _cropper = new Cropper(_image, _config);\n                setDirty(false);\n\n                //detects image orientation and rotates it\n                _that.autoRotate(this.src);\n                defer.resolve('cenkce');\n            };\n        };\n\n        return defer.promise;\n    }\n\n    this.getImage = function () {\n        var image = new Image();\n        image.src = _image.src;\n        return image;\n    }\n\n    this.autoRotate = function (source) {\n        EXIF.getData(source, function() {\n            //defer.notify({message:CropServiceEvents.EXIFFetched});\n\n            switch(this.exifdata.Orientation){\n                case 8:\n                    _cropper.rotate(-90);\n                    break;\n                case 3:\n                    _cropper.rotate(180);\n                    break;\n                case 6:\n                    _cropper.rotate(90);\n                    break;\n                default:\n                    break;\n            }\n\n        });\n    }\n\n    /**\n     * Returns cropperjs html container element\n     * @returns {*|Object}\n     */\n    this.getElement = function () {\n        return _element;\n    };\n\n    /**\n     * Sets cropperjs config\n     * @param config\n     */\n    this.setConfig = function (config) {\n        _config = angular.copy(config);\n    };\n\n    /**\n     * Return cropperjs config\n     */\n    this.getConfig = function () {\n        angular.copy(_config);\n    };\n\n    /**\n     * Returns an image data object with base64 data\n     *\n     * {\n     *   //Base64 data\n     *   url:'',\n     *   //Headerless Base64 data\n     *   base64:''\n     * }\n     * @param w\n     * @param h\n     * @returns {*}\n     */\n    this.exportData = function (w, h) {\n        if(!_cropper)\n            return;\n\n        var prefix = ';base64,';\n        var data   = {};\n        var img    = new Image();\n\n        var canvas = _cropper.getCroppedCanvas({width:w, height:h});\n        data.url   = canvas.toDataURL(\"image/jpeg\", 1.0);\n\n        img.src = data.url;\n\n        if(!data.url)\n            return false;\n\n        data.idx = data.url.indexOf(prefix);\n\n        if (data.idx >= 0) {\n            data.base64 = data.url.substring(data.idx + prefix.length);\n        }\n\n        //data.fileName = generateUUID()+'.jpg';\n        return data;\n    };\n\n    /**\n     * Draw an image via canvas element\n     * @param image\n     * @returns {string}\n     */\n    this.drawImage = function(image) {\n        var tempCanvas = document.createElement('canvas');\n        tempCanvas.width = image.naturalWidth;\n        tempCanvas.height = image.naturalHeight;\n\n        var ctx = tempCanvas.getContext(\"2d\");\n        ctx.drawImage(image, 0, 0);\n\n        return tempCanvas.toDataURL();\n    };\n\n    /**\n     * Sets cropperjs zoom\n     * @param value\n     */\n    this.zoomTo = function (value) {\n        if(_cropper)\n            _cropper.zoomTo(value);\n    };\n\n    /**\n     * Sets cropperjs rotate\n     * @param degree\n     */\n    this.rotate = function (degree) {\n        if(_cropper)\n            _cropper.rotate(degree);\n    };\n\n    /**\n     * Returns Cropperjs instance\n     * @returns {cropper}\n     */\n    this.getCropper = function () {\n        return _cropper;\n    };\n\n    /**\n     * Loads an image from File object\n     * @param files\n     * @returns {promise|*|module.exports.currentlyUnhandled.promise|AnimateRunner.promise|qFactory.Deferred.promise|vd.g.promise}\n     */\n    this.loadFromFileObject = function(files){\n        var defer = $q.defer();\n\n        _config.cropend = function (e, action) {\n        };\n\n        if(files.length > 1)\n            throw new Error('Multi-files are not supported');\n\n        imageReader.read(files).then(function (data) {\n            if(!data[0].url){\n                defer.reject('File data is not readable');\n            }\n\n            create(data[0].url).then(\n                function (data) {\n                    defer.resolve(data);\n                },\n                function (data) {\n                    defer.reject(data);\n                },\n                function (data) {\n                    defer.notify(data);\n                }\n            );\n        });\n\n        return defer.promise;\n    };\n\n    /**\n     * Loads an image from url\n     * @param url\n     * @returns {promise}\n     */\n    this.loadFromUrl = function(url){\n\n        _config.cropend = function (e, action) {\n        };\n\n        var p = create(url).then(\n            function (data) {\n                return data;\n            },\n            function (data) {\n                return data;\n            },\n            function (data) {\n                return data;\n            }\n        );\n\n        return p;\n    };\n}\n\n\nCropperComponent.$inject = ['cenkce.utils.cropperApp'];\n\nfunction CropperComponent($cropper){\n    var _btn;\n\n    return {\n        restrict: 'A',\n        controller: ['$scope', function ($scope) {\n            $scope.cropper        = {};\n            $scope.cropper.zoomTo = 0;\n            $scope.zoom           = 0;\n\n            $scope.$watch('zoom', function (newV, oldV) {\n                if(newV)\n                    $cropper.zoomTo(newV);\n            });\n\n            $scope.$parent.exportCroppedData = function (w, h) {\n                return $cropper.exportData(w, h);\n            };\n\n            $scope.$parent.fileBrowse = function () {\n                _btn[0].click();\n            };\n        }],\n        controllerAs:'cropperCtrl',\n        scope:true,\n        link: function ($scope, elem, attrs) {\n            //File input\n            _btn = elem.find('input[type=file]');\n\n            //file input is not found.\n            if(_btn.length == 0){\n                _btn = angular.element('<input type=\\'file\\' style=\"display: none;\" >');\n                elem.append(_btn);\n            }\n\n            //file input source is changed by user\n            _btn.bind('change', function (e) {\n                $scope.addPreview($cropper.getElement());\n                $cropper.loadFromFileObject(e.target.files).then(\n                    //completed\n                    function (data) {\n                    },\n                    //error\n                    function (data) {\n                    },\n                    //messages\n                    function (data) {\n                        if(data.message == CropServiceEvents.imageLoaded) {\n                        } else if(data.message == CropServiceEvents.completed) {\n                        }\n                    }\n                );\n            });\n\n            $scope.$on('$destroy', function () {\n                _btn.unbind('change');\n                _btn = null;\n            });\n        }\n    }\n}\n\nfunction CropperComponentPreview(){\n    return {\n        requie:'?cropper',\n        restrict:'A',\n        link: function ($scope, elem, attrs) {\n            $scope.addPreview = function(element){\n                elem.html('');\n                elem.append(element);\n            }\n        }\n    }\n};\n\nangular.module('cenkce.utils').service('cenkce.utils.cropperApp', CropperApplication);\nangular.module('cenkce.utils').directive('cropper', CropperComponent);\nangular.module('cenkce.utils').directive('cropperPreview', CropperComponentPreview);\n","/**\n * Created by cenkce on 1/25/16.\n */\n\nangular.module('cenkce.utils').service('cenkce.uitls.ga', GAnalytics);\n\nGAnalytics.$inject = ['$window'];\n\nfunction GAnalytics($window) {\n    var _ga = $window.ga;\n\n    this.page = function (page) {\n        _ga('send', {\n            hitType: 'pageview',\n            page: page\n        });\n    };\n\n    this.event = function (category, action, label) {\n        _ga('send', {\n            hitType: 'event',\n            eventCategory: category,\n            eventAction: action,\n            eventLabel: label\n        });\n    };\n};\n","/**\n * Created by cenkce on 2/1/16.\n */\nangular.module('cenkce.utils').service('cenkce.utils.generateUUID', generateUUID);\nfunction generateUUID() {\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n};\n","/**\n * Created by cenkce on 1/23/16.\n */\n\nImageFileReader.$inject = ['$q'];\n\n//TODO:refactor to file-reader\nfunction ImageFileReader(p) {\n    var $q = p;\n    this.read = function(files) {\n        var reader = new FileReader(),\n            filesData = [],\n            prefix = ';base64,';\n\n        var promises = [];\n\n        for (var i = 0, f; f = files[i]; i++) {\n            // process for only image files.\n            if (!f.type.match('image.*')) {\n                throw new Error('file must be image');\n                continue;\n            }\n\n            var defer = $q.defer();\n            promises.push(defer.promise);\n\n            (function (defer, f) {\n                reader.onload = function(e) {\n                    var data = {};\n                    var idx;\n\n                    if(reader.readyState == FileReader.DONE) {\n                        data.url = e.target.result;\n                        data.idx = data.url.indexOf(prefix);\n\n                        if (data.idx >= 0) {\n                            data.base64 = data.url.substring(data.idx + prefix.length);\n                        }\n\n                        data.fileName = f.name;\n                    }\n\n                    defer.resolve(data);\n                };\n\n            })(defer, f);\n\n            reader.readAsDataURL(f);\n        }\n\n        return $q.all(promises);\n    };\n};\n\nangular.module('cenkce.utils').service('cenkce.utils.imageFileReader', ImageFileReader);\n"],"sourceRoot":"/source/"}