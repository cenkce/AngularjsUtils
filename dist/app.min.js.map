{"version":3,"sources":["app.js","app-sharer.js","base-controller.js","cropper-component.js","ga-analytics.js","guid.js","image-file-reader.js"],"names":["angular","module","service","Sharer","$inject","$q","_promise","this","fbfeed","caption","description","pic","link","defer","FB","ui","method","picture","response","resolve","reject","promise","fbshare","href","twshare","desc","url","openwin","window","open","focus","factory","BaseController","$scope","_unbinds","_that","$on","clearEventHandlers","u","call","scope","event","handler","push","$watch","CropperApplication","CropServiceEvents","imageLoaded","imageSelected","EXIFFetched","completed","cropped","imageReader","$rootScope","$window","_cropper","cropper","_isDirty","_config","dragMode","scalable","aspectRatio","restore","minCropBoxWidth","checkOrientation","guides","toggleDragModeOnDblclick","center","highlight","cropBoxMovable","cropBoxResizable","_image","Image","_element","element","Cropper","Error","setDirty","value","getElement","setConfig","config","copy","getConfig","exportData","w","h","prefix","data","img","canvas","getCroppedCanvas","width","height","toDataURL","src","idx","indexOf","base64","substring","length","drawImage","image","tempCanvas","document","createElement","naturalWidth","naturalHeight","ctx","getContext","zoomTo","rotate","degree","getCropper","load","files","cropend","e","action","undefined","EXIF","read","then","onload","console","log","append","minCropBoxHeight","getData","notify","message","exifdata","Orientation","CropperComponent","$cropper","_btn","restrict","controller","zoom","newV","oldV","$parent","exportCroppedData","fileBrowse","click","controllerAs","elem","attrs","find","bind","addPreview","target","unbind","CropperComponentPreview","requie","html","directive","GAnalytics","_ga","ga","page","hitType","category","label","eventCategory","eventAction","eventLabel","generateUUID","d","Date","getTime","uuid","replace","c","r","Math","random","floor","toString","ImageFileReader","p","f","reader","FileReader","promises","i","type","match","readyState","DONE","result","fileName","name","readAsDataURL","all"],"mappings":"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","file":"app.min.js","sourcesContent":["/*!\n * angularjs-components\n * https://github.com/cenkce/angularjs-utils#readme\n * Version: 0.1.0 - 2016-02-08T10:01:43.251Z\n * License: MIT\n */\n\n\n(function (angular) { \n'use strict';\nvar module = angular.module('cenkce.utils', ['ng']);\n\n/**\n * Created by cenkce on 1/25/16.\n */\n\n\nangular.module('cenkce.utils').service('cenkce.utils.sharer', Sharer);\nSharer.$inject = ['$q'];\n\nfunction Sharer($q) {\n    var _promise =  $q;\n    this.fbfeed = function(caption, description, pic, link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'feed',\n            link: link,\n            picture:pic,\n            description:description,\n            caption: caption,\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.fbshare = function(link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'share',\n            href: link\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.twshare = function(desc, link){\n        var url = \"http://twitter.com/home?status=\"+desc+\" \"+link;\n        var openwin = window.open(url, '', 'height=600,width=800,resizable=true,scrollbars=yes,toolbar=no,menubar=no,location=no');\n\n        if (window.focus) {\n            openwin.focus();\n        }\n    };\n};\n\n/**\n * Created by cenkce on 1/8/16.\n */\n\n\nangular.module('cenkce.utils').factory('cenkce.utils.baseController', BaseController);\n\nBaseController.$inject = ['$scope'];\n\n/**\n * Base controller class.\n * @param $scope\n * @param $route\n * @constructor\n */\nfunction BaseController($scope) {\n    var _unbinds = [], _that = this;\n\n    //Auto unbinds event hadlers when scope is destroyed\n    $scope.$on('$destroy', function () {\n        _that.clearEventHandlers();\n    });\n\n    this.clearEventHandlers = function () {\n        for(var u in _unbinds){\n            _unbinds[u].call();\n        }\n    };\n\n    this.$on = function (scope, event, handler) {\n        _unbinds.push(scope.$on(event, handler));\n    };\n\n    this.$watch = function (scope, event, handler) {\n        _unbinds.push(scope.$watch(event, handler));\n    };\n};\n\n/**\n * Created by cenkce on 1/22/16.\n */\n\nCropperApplication.$inject = ['cenkce.utils.imageFileReader', '$rootScope', '$window', '$q'];\n\nvar CropServiceEvents = {\n    imageLoaded :'cropper:image-loaded',\n    imageSelected:'cropper:image-selected',\n    EXIFFetched:'cropper:exif-fetched',\n    completed:'cropper:completed',\n    cropped:'cropper:cropped'\n};\n\nfunction CropperApplication(imageReader, $rootScope, $window, $q){\n    var _that = this, _cropper = $window.cropper, waitingRotation = 0, temp, _isDirty = false,\n        _config = {\n            dragMode: 'move',\n            scalable:false,\n            aspectRatio: 1,\n            restore: false,\n            minCropBoxWidth:230,\n            checkOrientation : false,\n            guides: false,\n            toggleDragModeOnDblclick:false,\n            center: false,\n            highlight: false,\n            cropBoxMovable: false,\n            cropBoxResizable: false\n        },\n        _image = new Image,\n        _element = angular.element('<div></div>');\n\n    if(typeof Cropper === 'undefined')\n        throw new Error('Croppperjs is not found.');\n\n    /**\n     * Sets dirty state\n     * @param value\n     */\n    function setDirty(value) {\n        _isDirty = value;\n    }\n\n    /**\n     * Returns cropperjs html container element\n     * @returns {*|Object}\n     */\n    this.getElement = function () {\n        return _element;\n    };\n\n    /**\n     * Sets cropperjs config\n     * @param config\n     */\n    this.setConfig = function (config) {\n        _config = angular.copy(config);\n    };\n\n    /**\n     * Return cropperjs config\n     */\n    this.getConfig = function () {\n        angular.copy(_config);\n    };\n\n    /**\n     * Returns an image data object with base64 data\n     *\n     * {\n     *   //Base64 data\n     *   url:'',\n     *   //Headerless Base64 data\n     *   base64:''\n     * }\n     * @param w\n     * @param h\n     * @returns {*}\n     */\n    this.exportData = function (w, h) {\n        if(!_cropper)\n            return;\n\n        var prefix = ';base64,';\n        var data   = {};\n        var img    = new Image();\n\n        var canvas = _cropper.getCroppedCanvas({width:w, height:h});\n        data.url   = canvas.toDataURL(\"image/jpeg\", 1.0);\n\n        img.src = data.url;\n\n        if(!data.url)\n            return false;\n\n        data.idx = data.url.indexOf(prefix);\n\n        if (data.idx >= 0) {\n            data.base64 = data.url.substring(data.idx + prefix.length);\n        }\n\n        //data.fileName = generateUUID()+'.jpg';\n        return data;\n    };\n\n    /**\n     * Draw an image via canvas element\n     * @param image\n     * @returns {string}\n     */\n    function drawImage(image) {\n        var tempCanvas = document.createElement('canvas');\n        tempCanvas.width = image.naturalWidth;\n        tempCanvas.height = image.naturalHeight;\n\n        var ctx = tempCanvas.getContext(\"2d\");\n        ctx.drawImage(image, 0, 0);\n\n        return tempCanvas.toDataURL();\n    };\n\n    /**\n     * Sets cropperjs zoom\n     * @param value\n     */\n    this.zoomTo = function (value) {\n        if(_cropper)\n            _cropper.zoomTo(value);\n    };\n\n    /**\n     * Sets cropperjs rotate\n     * @param degree\n     */\n    this.rotate = function (degree) {\n        if(_cropper)\n            _cropper.rotate(degree);\n    };\n\n    /**\n     * Returns Cropperjs instance\n     * @returns {{}|*|cropper|$scope.cropper|Cropper.cropper|j.cropper}\n     */\n    this.getCropper = function () {\n        return _cropper;\n    };\n\n    /**\n     * Loads an image from File object\n     * @param files\n     * @returns {promise|*|module.exports.currentlyUnhandled.promise|AnimateRunner.promise|qFactory.Deferred.promise|vd.g.promise}\n     */\n    this.load = function(files){\n        setDirty(true);\n        var defer = $q.defer();\n\n        _config.cropend = function (e, action) {\n        };\n\n        if(files.length > 1)\n            throw new Error('Multi-files are not supported');\n\n        if($window.EXIF === undefined)\n            throw new Error('exif-js cannot be found.');\n\n        imageReader.read(files).then(function (data) {\n            if(!data[0].url){\n                throw new Error('File data is not readable');\n            }\n\n            var img = new Image;\n            img.src = data[0].url;\n\n            img.onload = function () {\n                //var img = new Image;\n                setDirty(false);\n\n                //IOS auto rotation hack\n                _image.src = drawImage(img);\n\n                _image.onload = function () {\n                    //var container = angular.element('<div></div>);\n                    //defer.notify({message:CropServiceEvents.imageLoaded, complete: function () {\n                        console.log('completed');\n\n                        _element.append(_image);\n                        _cropper = new Cropper(_image, {\n                            dragMode: 'move',\n                            scalable:false,\n                            aspectRatio: 1,\n                            restore: false,\n                            minCropBoxWidth:200,\n                            minCropBoxHeight:200,\n                            checkOrientation : false,\n                            guides: false,\n                            toggleDragModeOnDblclick:false,\n                            center: false,\n                            highlight: false,\n                            cropBoxMovable: false,\n                            cropBoxResizable: false,\n                            cropend: function (e, action) {\n                            }});\n\n\n                        //detects image orientation and rotates it by orientation.\n                        EXIF.getData(files[0], function() {\n                            defer.notify({message:CropServiceEvents.EXIFFetched});\n\n                            switch(this.exifdata.Orientation){\n                                case 8:\n                                    _cropper.rotate(-90);\n                                    break;\n                                case 3:\n                                    _cropper.rotate(180);\n                                    break;\n                                case 6:\n                                    _cropper.rotate(90);\n                                    break;\n                                default:\n                                    break;\n                            }\n\n                            //defer.notify({message:CropServiceEvents.completed, complete: function () {\n                                defer.resolve();\n                            //}});\n                        });\n/*\n                    }, cancel: function () {\n                        defer.reject();\n                    }});*/\n                    //Creates new Cropper instance and injects hacked image to\n                };\n            };\n        });\n\n        return defer.promise;\n    }\n}\n\n\nCropperComponent.$inject = ['cenkce.utils.cropperApp'];\n\nfunction CropperComponent($cropper){\n    var _btn;\n\n    return {\n        restrict: 'A',\n        controller: ['$scope', function ($scope) {\n            $scope.cropper        = {};\n            $scope.cropper.zoomTo = 0;\n            $scope.zoom           = 0;\n\n            $scope.$watch('zoom', function (newV, oldV) {\n                console.log('zoom');\n                if(newV)\n                    $cropper.zoomTo(newV);\n            });\n\n            $scope.$parent.exportCroppedData = function (w, h) {\n                return $cropper.exportData(w, h);\n            };\n\n            $scope.$parent.fileBrowse = function () {\n                console.log('browse');\n                _btn[0].click();\n            };\n        }],\n        controllerAs:'cropperCtrl',\n        scope:true,\n        link: function ($scope, elem, attrs) {\n            //File input\n            _btn = elem.find('input[type=file]');\n\n            //file input is not found.\n            if(_btn.length == 0){\n                _btn = angular.element('<input type=\\'file\\' style=\"display: none;\" >');\n                elem.append(_btn);\n            }\n\n            //file input source is changed by user\n            _btn.bind('change', function (e) {\n                $scope.addPreview($cropper.getElement());\n                $cropper.load(e.target.files).then(\n                    //completed\n                    function (data) {\n                    },\n                    //error\n                    function (data) {\n                    },\n                    //messages\n                    function (data) {\n                        if(data.message == CropServiceEvents.imageLoaded) {\n                        } else if(data.message == CropServiceEvents.completed) {\n                        }\n                    }\n                );\n            });\n\n            $scope.$on('$destroy', function () {\n                _btn.unbind('change');\n                _btn = null;\n            });\n        }\n    }\n}\n\nfunction CropperComponentPreview(){\n    return {\n        requie:'?cropper',\n        restrict:'A',\n        link: function ($scope, elem, attrs) {\n            $scope.addPreview = function(element){\n                elem.html('');\n                elem.append(element);\n            }\n        }\n    }\n};\n\nangular.module('cenkce.utils').service('cenkce.utils.cropperApp', CropperApplication);\nangular.module('cenkce.utils').directive('cropper', CropperComponent);\nangular.module('cenkce.utils').directive('cropperPreview', CropperComponentPreview);\n\n/**\n * Created by cenkce on 1/25/16.\n */\n\nangular.module('cenkce.utils').service('cenkce.uitls.ga', GAnalytics);\n\nGAnalytics.$inject = ['$window'];\n\nfunction GAnalytics($window) {\n    var _ga = $window.ga;\n\n    this.page = function (page) {\n        _ga('send', {\n            hitType: 'pageview',\n            page: page\n        });\n    };\n\n    this.event = function (category, action, label) {\n        _ga('send', {\n            hitType: 'event',\n            eventCategory: category,\n            eventAction: action,\n            eventLabel: label\n        });\n    };\n};\n\n/**\n * Created by cenkce on 2/1/16.\n */\nangular.module('cenkce.utils').service('cenkce.utils.generateUUID', generateUUID);\nfunction generateUUID() {\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n};\n\n/**\n * Created by cenkce on 1/23/16.\n */\n\nImageFileReader.$inject = ['$q'];\n\n//TODO:refactor to file-reader\nfunction ImageFileReader(p) {\n    var $q = p;\n    this.read = function(files) {\n        var reader = new FileReader(),\n            filesData = [],\n            prefix = ';base64,';\n\n        var promises = [];\n\n        for (var i = 0, f; f = files[i]; i++) {\n            // process for only image files.\n            if (!f.type.match('image.*')) {\n                throw new Error('file must be image');\n                continue;\n            }\n\n            var defer = $q.defer();\n            promises.push(defer.promise);\n\n            (function (defer, f) {\n                reader.onload = function(e) {\n                    var data = {};\n                    var idx;\n\n                    if(reader.readyState == FileReader.DONE) {\n                        data.url = e.target.result;\n                        data.idx = data.url.indexOf(prefix);\n\n                        if (data.idx >= 0) {\n                            data.base64 = data.url.substring(data.idx + prefix.length);\n                        }\n\n                        data.fileName = f.name;\n                    }\n\n                    defer.resolve(data);\n                };\n\n            })(defer, f);\n\n            reader.readAsDataURL(f);\n        }\n\n        return $q.all(promises);\n    };\n};\n\nangular.module('cenkce.utils').service('cenkce.utils.imageFileReader', ImageFileReader);\n\n}(window.angular));","/**\n * Created by cenkce on 1/25/16.\n */\n\n\nangular.module('cenkce.utils').service('cenkce.utils.sharer', Sharer);\nSharer.$inject = ['$q'];\n\nfunction Sharer($q) {\n    var _promise =  $q;\n    this.fbfeed = function(caption, description, pic, link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'feed',\n            link: link,\n            picture:pic,\n            description:description,\n            caption: caption,\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.fbshare = function(link){\n        var defer = _promise.defer();\n\n        FB.ui({\n            method: 'share',\n            href: link\n        }, function(response){\n            defer.resolve(response);\n        }, function(response){\n            defer.reject(response);\n        });\n\n        return defer.promise;\n    };\n\n    this.twshare = function(desc, link){\n        var url = \"http://twitter.com/home?status=\"+desc+\" \"+link;\n        var openwin = window.open(url, '', 'height=600,width=800,resizable=true,scrollbars=yes,toolbar=no,menubar=no,location=no');\n\n        if (window.focus) {\n            openwin.focus();\n        }\n    };\n};\n","/**\n * Created by cenkce on 1/8/16.\n */\n\n\nangular.module('cenkce.utils').factory('cenkce.utils.baseController', BaseController);\n\nBaseController.$inject = ['$scope'];\n\n/**\n * Base controller class.\n * @param $scope\n * @param $route\n * @constructor\n */\nfunction BaseController($scope) {\n    var _unbinds = [], _that = this;\n\n    //Auto unbinds event hadlers when scope is destroyed\n    $scope.$on('$destroy', function () {\n        _that.clearEventHandlers();\n    });\n\n    this.clearEventHandlers = function () {\n        for(var u in _unbinds){\n            _unbinds[u].call();\n        }\n    };\n\n    this.$on = function (scope, event, handler) {\n        _unbinds.push(scope.$on(event, handler));\n    };\n\n    this.$watch = function (scope, event, handler) {\n        _unbinds.push(scope.$watch(event, handler));\n    };\n};\n","/**\n * Created by cenkce on 1/22/16.\n */\n\nCropperApplication.$inject = ['cenkce.utils.imageFileReader', '$rootScope', '$window', '$q'];\n\nvar CropServiceEvents = {\n    imageLoaded :'cropper:image-loaded',\n    imageSelected:'cropper:image-selected',\n    EXIFFetched:'cropper:exif-fetched',\n    completed:'cropper:completed',\n    cropped:'cropper:cropped'\n};\n\nfunction CropperApplication(imageReader, $rootScope, $window, $q){\n    var _that = this, _cropper = $window.cropper, waitingRotation = 0, temp, _isDirty = false,\n        _config = {\n            dragMode: 'move',\n            scalable:false,\n            aspectRatio: 1,\n            restore: false,\n            minCropBoxWidth:230,\n            checkOrientation : false,\n            guides: false,\n            toggleDragModeOnDblclick:false,\n            center: false,\n            highlight: false,\n            cropBoxMovable: false,\n            cropBoxResizable: false\n        },\n        _image = new Image,\n        _element = angular.element('<div></div>');\n\n    if(typeof Cropper === 'undefined')\n        throw new Error('Croppperjs is not found.');\n\n    /**\n     * Sets dirty state\n     * @param value\n     */\n    function setDirty(value) {\n        _isDirty = value;\n    }\n\n    /**\n     * Returns cropperjs html container element\n     * @returns {*|Object}\n     */\n    this.getElement = function () {\n        return _element;\n    };\n\n    /**\n     * Sets cropperjs config\n     * @param config\n     */\n    this.setConfig = function (config) {\n        _config = angular.copy(config);\n    };\n\n    /**\n     * Return cropperjs config\n     */\n    this.getConfig = function () {\n        angular.copy(_config);\n    };\n\n    /**\n     * Returns an image data object with base64 data\n     *\n     * {\n     *   //Base64 data\n     *   url:'',\n     *   //Headerless Base64 data\n     *   base64:''\n     * }\n     * @param w\n     * @param h\n     * @returns {*}\n     */\n    this.exportData = function (w, h) {\n        if(!_cropper)\n            return;\n\n        var prefix = ';base64,';\n        var data   = {};\n        var img    = new Image();\n\n        var canvas = _cropper.getCroppedCanvas({width:w, height:h});\n        data.url   = canvas.toDataURL(\"image/jpeg\", 1.0);\n\n        img.src = data.url;\n\n        if(!data.url)\n            return false;\n\n        data.idx = data.url.indexOf(prefix);\n\n        if (data.idx >= 0) {\n            data.base64 = data.url.substring(data.idx + prefix.length);\n        }\n\n        //data.fileName = generateUUID()+'.jpg';\n        return data;\n    };\n\n    /**\n     * Draw an image via canvas element\n     * @param image\n     * @returns {string}\n     */\n    function drawImage(image) {\n        var tempCanvas = document.createElement('canvas');\n        tempCanvas.width = image.naturalWidth;\n        tempCanvas.height = image.naturalHeight;\n\n        var ctx = tempCanvas.getContext(\"2d\");\n        ctx.drawImage(image, 0, 0);\n\n        return tempCanvas.toDataURL();\n    };\n\n    /**\n     * Sets cropperjs zoom\n     * @param value\n     */\n    this.zoomTo = function (value) {\n        if(_cropper)\n            _cropper.zoomTo(value);\n    };\n\n    /**\n     * Sets cropperjs rotate\n     * @param degree\n     */\n    this.rotate = function (degree) {\n        if(_cropper)\n            _cropper.rotate(degree);\n    };\n\n    /**\n     * Returns Cropperjs instance\n     * @returns {{}|*|cropper|$scope.cropper|Cropper.cropper|j.cropper}\n     */\n    this.getCropper = function () {\n        return _cropper;\n    };\n\n    /**\n     * Loads an image from File object\n     * @param files\n     * @returns {promise|*|module.exports.currentlyUnhandled.promise|AnimateRunner.promise|qFactory.Deferred.promise|vd.g.promise}\n     */\n    this.load = function(files){\n        setDirty(true);\n        var defer = $q.defer();\n\n        _config.cropend = function (e, action) {\n        };\n\n        if(files.length > 1)\n            throw new Error('Multi-files are not supported');\n\n        if($window.EXIF === undefined)\n            throw new Error('exif-js cannot be found.');\n\n        imageReader.read(files).then(function (data) {\n            if(!data[0].url){\n                throw new Error('File data is not readable');\n            }\n\n            var img = new Image;\n            img.src = data[0].url;\n\n            img.onload = function () {\n                //var img = new Image;\n                setDirty(false);\n\n                //IOS auto rotation hack\n                _image.src = drawImage(img);\n\n                _image.onload = function () {\n                    //var container = angular.element('<div></div>);\n                    //defer.notify({message:CropServiceEvents.imageLoaded, complete: function () {\n                        console.log('completed');\n\n                        _element.append(_image);\n                        _cropper = new Cropper(_image, {\n                            dragMode: 'move',\n                            scalable:false,\n                            aspectRatio: 1,\n                            restore: false,\n                            minCropBoxWidth:200,\n                            minCropBoxHeight:200,\n                            checkOrientation : false,\n                            guides: false,\n                            toggleDragModeOnDblclick:false,\n                            center: false,\n                            highlight: false,\n                            cropBoxMovable: false,\n                            cropBoxResizable: false,\n                            cropend: function (e, action) {\n                            }});\n\n\n                        //detects image orientation and rotates it by orientation.\n                        EXIF.getData(files[0], function() {\n                            defer.notify({message:CropServiceEvents.EXIFFetched});\n\n                            switch(this.exifdata.Orientation){\n                                case 8:\n                                    _cropper.rotate(-90);\n                                    break;\n                                case 3:\n                                    _cropper.rotate(180);\n                                    break;\n                                case 6:\n                                    _cropper.rotate(90);\n                                    break;\n                                default:\n                                    break;\n                            }\n\n                            //defer.notify({message:CropServiceEvents.completed, complete: function () {\n                                defer.resolve();\n                            //}});\n                        });\n/*\n                    }, cancel: function () {\n                        defer.reject();\n                    }});*/\n                    //Creates new Cropper instance and injects hacked image to\n                };\n            };\n        });\n\n        return defer.promise;\n    }\n}\n\n\nCropperComponent.$inject = ['cenkce.utils.cropperApp'];\n\nfunction CropperComponent($cropper){\n    var _btn;\n\n    return {\n        restrict: 'A',\n        controller: ['$scope', function ($scope) {\n            $scope.cropper        = {};\n            $scope.cropper.zoomTo = 0;\n            $scope.zoom           = 0;\n\n            $scope.$watch('zoom', function (newV, oldV) {\n                console.log('zoom');\n                if(newV)\n                    $cropper.zoomTo(newV);\n            });\n\n            $scope.$parent.exportCroppedData = function (w, h) {\n                return $cropper.exportData(w, h);\n            };\n\n            $scope.$parent.fileBrowse = function () {\n                console.log('browse');\n                _btn[0].click();\n            };\n        }],\n        controllerAs:'cropperCtrl',\n        scope:true,\n        link: function ($scope, elem, attrs) {\n            //File input\n            _btn = elem.find('input[type=file]');\n\n            //file input is not found.\n            if(_btn.length == 0){\n                _btn = angular.element('<input type=\\'file\\' style=\"display: none;\" >');\n                elem.append(_btn);\n            }\n\n            //file input source is changed by user\n            _btn.bind('change', function (e) {\n                $scope.addPreview($cropper.getElement());\n                $cropper.load(e.target.files).then(\n                    //completed\n                    function (data) {\n                    },\n                    //error\n                    function (data) {\n                    },\n                    //messages\n                    function (data) {\n                        if(data.message == CropServiceEvents.imageLoaded) {\n                        } else if(data.message == CropServiceEvents.completed) {\n                        }\n                    }\n                );\n            });\n\n            $scope.$on('$destroy', function () {\n                _btn.unbind('change');\n                _btn = null;\n            });\n        }\n    }\n}\n\nfunction CropperComponentPreview(){\n    return {\n        requie:'?cropper',\n        restrict:'A',\n        link: function ($scope, elem, attrs) {\n            $scope.addPreview = function(element){\n                elem.html('');\n                elem.append(element);\n            }\n        }\n    }\n};\n\nangular.module('cenkce.utils').service('cenkce.utils.cropperApp', CropperApplication);\nangular.module('cenkce.utils').directive('cropper', CropperComponent);\nangular.module('cenkce.utils').directive('cropperPreview', CropperComponentPreview);\n","/**\n * Created by cenkce on 1/25/16.\n */\n\nangular.module('cenkce.utils').service('cenkce.uitls.ga', GAnalytics);\n\nGAnalytics.$inject = ['$window'];\n\nfunction GAnalytics($window) {\n    var _ga = $window.ga;\n\n    this.page = function (page) {\n        _ga('send', {\n            hitType: 'pageview',\n            page: page\n        });\n    };\n\n    this.event = function (category, action, label) {\n        _ga('send', {\n            hitType: 'event',\n            eventCategory: category,\n            eventAction: action,\n            eventLabel: label\n        });\n    };\n};\n","/**\n * Created by cenkce on 2/1/16.\n */\nangular.module('cenkce.utils').service('cenkce.utils.generateUUID', generateUUID);\nfunction generateUUID() {\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n};\n","/**\n * Created by cenkce on 1/23/16.\n */\n\nImageFileReader.$inject = ['$q'];\n\n//TODO:refactor to file-reader\nfunction ImageFileReader(p) {\n    var $q = p;\n    this.read = function(files) {\n        var reader = new FileReader(),\n            filesData = [],\n            prefix = ';base64,';\n\n        var promises = [];\n\n        for (var i = 0, f; f = files[i]; i++) {\n            // process for only image files.\n            if (!f.type.match('image.*')) {\n                throw new Error('file must be image');\n                continue;\n            }\n\n            var defer = $q.defer();\n            promises.push(defer.promise);\n\n            (function (defer, f) {\n                reader.onload = function(e) {\n                    var data = {};\n                    var idx;\n\n                    if(reader.readyState == FileReader.DONE) {\n                        data.url = e.target.result;\n                        data.idx = data.url.indexOf(prefix);\n\n                        if (data.idx >= 0) {\n                            data.base64 = data.url.substring(data.idx + prefix.length);\n                        }\n\n                        data.fileName = f.name;\n                    }\n\n                    defer.resolve(data);\n                };\n\n            })(defer, f);\n\n            reader.readAsDataURL(f);\n        }\n\n        return $q.all(promises);\n    };\n};\n\nangular.module('cenkce.utils').service('cenkce.utils.imageFileReader', ImageFileReader);\n"],"sourceRoot":"/source/"}